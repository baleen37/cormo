// Generated by CoffeeScript 2.3.1
//#
// CORMO types
// @module types
// @namespace cormo

//#
// Represents a string, used in model schemas.
// @memberOf types
var CormoTypesBoolean, CormoTypesDate, CormoTypesGeoPoint, CormoTypesInteger, CormoTypesNumber, CormoTypesObject, CormoTypesRecordID, CormoTypesString, CormoTypesText, GeoPoint, Integer, RecordID;

CormoTypesString = function(length) {
  if (!(this instanceof CormoTypesString)) {
    return new CormoTypesString(length);
  }
  this.length = length;
  this.toString = function() {
    if (this.length) {
      return `string(${this.length})`;
    } else {
      return 'string';
    }
  };
};

exports.String = CormoTypesString;

//#
// Represents a double-precision floating-point, used in model schemas.
// @memberOf types
exports.Number = CormoTypesNumber = class CormoTypesNumber {
  toString() {
    return 'number';
  }

};

//#
// Represents a boolean, used in model schemas.
// @memberOf types
exports.Boolean = CormoTypesBoolean = class CormoTypesBoolean {
  toString() {
    return 'boolean';
  }

};

//#
// Represents a 32bit integer, used in model schemas.
// @memberOf types
exports.Integer = CormoTypesInteger = class CormoTypesInteger {
  toString() {
    return 'integer';
  }

};

//#
// Represents a two-dimensional point, used in model schemas.

// This type is supported only in MongoDB and MySQL.
// @memberOf types
exports.GeoPoint = CormoTypesGeoPoint = class CormoTypesGeoPoint {
  toString() {
    return 'geopoint';
  }

};

//#
// Represents a date, used in model schemas.
// @memberOf types
exports.Date = CormoTypesDate = class CormoTypesDate {
  toString() {
    return 'date';
  }

};

//#
// Represents a general object, used in model schemas.

// A value of this type will be converted to a JSON string
// if the adapter does not support a general object.
// @memberOf types
exports.Object = CormoTypesObject = class CormoTypesObject {
  toString() {
    return 'object';
  }

};

//#
// Represents a record id, used in model schemas.
// @memberOf types
exports.RecordID = CormoTypesRecordID = class CormoTypesRecordID {
  toString() {
    return 'recordid';
  }

};

//#
// Represents a text, used in model schemas.
// @memberOf types
exports.Text = CormoTypesText = class CormoTypesText {
  toString() {
    return 'text';
  }

};

//#
// Converts JavaScript built-in class to CORMO type
// @private
// @param {Function|String} type
// @return {String}
exports._toCORMOType = function(type) {
  if (typeof type === 'string') {
    type = type.toLowerCase();
    if (/^string\((\d+)\)$/.test(type)) {
      type = new CormoTypesString(Number(RegExp.$1));
    } else {
      switch (type) {
        case 'string':
          type = exports.String;
          break;
        case 'number':
          type = exports.Number;
          break;
        case 'boolean':
          type = exports.Boolean;
          break;
        case 'integer':
          type = exports.Integer;
          break;
        case 'geopoint':
          type = exports.GeoPoint;
          break;
        case 'date':
          type = exports.Date;
          break;
        case 'object':
          type = exports.Object;
          break;
        case 'recordid':
          type = exports.RecordID;
          break;
        case 'text':
          type = exports.Text;
      }
    }
  } else {
    switch (type) {
      case String:
        type = exports.String;
        break;
      case Number:
        type = exports.Number;
        break;
      case Boolean:
        type = exports.Boolean;
        break;
      case Date:
        type = exports.Date;
        break;
      case Object:
        type = exports.Object;
    }
  }
  if (typeof type === 'function') {
    type = new type();
  }
  return type;
};

//#
// A pseudo class represents a record's unique identifier.

// Its real type differs by adapters.

// * String for MongoDB
// * Integer for MySQL, SQLite3, PostegreSQL
// @namespace ptypes
RecordID = class RecordID { };

//#
// A pseudo class represents an integer
// @namespace ptypes
Integer = class Integer { };

//#
// A pseudo class represents a two-dimensional point
// @namespace ptypes
GeoPoint = class GeoPoint { };
